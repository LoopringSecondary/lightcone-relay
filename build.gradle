buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.6'
    }
}

plugins {
    id 'scala'
    id 'java'
    id "com.diffplug.gradle.spotless" version "3.13.0"
    id "com.google.protobuf" version "0.8.6"
}

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'com.google.protobuf'

dependencies {
    compile 'org.scala-lang:scala-library:2.11.8'
    compile 'com.google.protobuf:protobuf-java:3.6.0'

    testCompile group: 'com.typesafe.akka', name: 'akka-http-testkit_2.12', version:'10.1.3'
    testCompile group: 'com.typesafe.akka', name: 'akka-stream-testkit_2.12', version:'2.5.13'
    testCompile 'org.scalatest:scalatest_2.11:3.0.4'

    compile group: 'com.typesafe.akka', name: 'akka-http_2.12', version:'10.1.3'
    compile group: 'com.typesafe.akka', name: 'akka-remote_2.12', version:'2.5.13'
    compile group: 'com.typesafe.akka', name: 'akka-stream_2.12', version:'2.5.13'
    compile group: 'com.typesafe.akka', name: 'akka-cluster_2.12', version: '2.5.13'
    compile group: 'com.typesafe.akka', name: 'akka-cluster-sharding_2.12', version: '2.5.13'
    compile group: 'com.typesafe.akka', name: 'akka-persistence_2.12', version: '2.5.13'
    compile group: 'com.typesafe.akka', name: 'akka-cluster-tools_2.12', version: '2.5.13'

    compile group: 'org.fusesource.leveldbjni', name: 'leveldbjni-all', version: '1.8'

    compile group: "com.lightbend.akka.management", name: "akka-management-cluster-bootstrap_2.12", version: "0.14.0"
    compile group: "com.lightbend.akka.discovery", name: "akka-discovery-dns_2.12", version: "0.14.0"
}

task run(type:JavaExec) {
    main = "com.upblockchain.lightcone.LightconeMain"
    classpath = sourceSets.main.runtimeClasspath
}

spotless {
    format 'misc', {
        target '**/*.md', '**/.gitignore'

        trimTrailingWhitespace()
        indentWithSpaces(4) // or spaces. Takes an integer argument if you don't like 4
        endWithNewline()
    }
    java {
        googleJavaFormat()
    }
    scala {
        scalafmt()
    }
}

repositories {
    jcenter()
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/proto'
        }
        java {
            srcDirs 'src/main/java', 'generated-sources/main/java'
        }
    }
}

protobuf {
    protoc {
        // The artifact spec for the Protobuf Compiler
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }

    generateProtoTasks.generatedFilesBaseDir = 'src/main/generated-sources'

    generateProtoTasks {
        all().each { task ->
            // Here you can configure the task
        }
        ofSourceSet('main')
    }
}

