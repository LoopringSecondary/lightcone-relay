syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.loopring.lightcone.proto";
package org.loopring.lightcone.proto;

import public "common.proto";

message SubmitOrderReq {
    Order order = 1;
}
message SubmitOrderResp {
    string order_hash = 1;
}

message GetOrderReq {
    string order_hash = 1;
}
message GetOrderResp {
    Order order = 1;
}

message GetOrdersReq {
    PaginationQuery page = 1;
    OrderQuery query = 2;
}

message OrderQuery {
    repeated string status = 1;
    string delegate = 2;
    string owner = 3;
    string market = 4;
//    string order_hash = 5;
    repeated string order_hashes = 6;
    string side = 7;
    string order_type = 8;
}

message GetOrdersResp {
    repeated Order order = 1;
    Pagination pagination = 2;
}

message CancelOrdersReq {
    SoftCancelSign sign = 1;
    CancelOrderOption cancel_option = 2;
}

message CancelOrderOption {
    string order_hash = 1;
    int64 cut_off_time = 2;
    string token_s = 3;
    string token_b = 4;
    string type = 5;
}
// use common empty response replaced
//message CancelOrdersResp {
//}

message GetOrder {
    string order_hash = 1;
}
message OneOrder {
    Order order = 1;
}

message GetOrderInfo {
}
message OrderInfo {
}

message GetOrders {
    PaginationQuery page = 1;
    OrderQuery query = 2;
}
message MultiOrders {
    repeated Order order = 1;
    Pagination pagination = 2;
}

message GetTopOrders {
    OrderQuery query = 1;
}
message TopOrders {
    repeated Order order = 1;
}

message FetchTopOrderIds {
    OrderQuery query = 1;
}
message TopOrdersIds {
    repeated string order_hashed = 1;
}

message SaveOrders {
    repeated Order orders = 1;
}
message SaveUpdatedOrders {
    repeated Order orders = 1;
}
message OrdersSaved {
    repeated Order orders = 1;
}

message UpdateOrders {
    repeated Order orders = 1;
}

message CalculateOrdersStatus {
    repeated Order orders = 1;
}

message UpdatedOrder {
    oneof updated {
        Order order = 1;
        DeferOrder defer_order = 2;
        OrderBeingMatched order_being_matched = 3;
        OrderSettling order_settling = 4;
    }
}

message UpdatedOrders {
    repeated UpdatedOrder orders = 1;
}

message SoftCancelOrders {
    CancelOrderOption cancel_option = 1;
}
message OrdersSoftCancelled {
    repeated string order_hashes = 1;
}
//message OrderCancelled {}

message OrderStatusChanged {
    repeated string order_hashes = 1;
}
message OrderSettling {
    string order_hash = 1;
    string amount = 2;
}
message MarkOrdersSettling {
    repeated OrderSettling orders_settling = 1;
}
message OrderBeingMatched {
    string order_hash = 1;
}
message MarkOrdersBeingMatched {
    repeated OrderBeingMatched orders_being_matched = 1;
}

message DeferOrder {
    string order_hash = 1;
    int64 deferred_time = 2;
}

message MarkOrdersDeferred {
    repeated DeferOrder defer_orders = 1;
}

message UpdateOrdersById {
    repeated string order_hashes = 1;
}

message Order {
    int64 id = 19;
    RawOrder raw_order = 1;
    int64 updated_block = 2;
    string dealtAmountS = 3;
    string dealtAmountB = 4;
    string splitAmountS = 5;
    string splitAmountB = 6;
    string cancelledAmountS = 7;
    string cancelledAmountB = 8;
    OrderStatus status = 9;
    int32 broadcast_time = 10;
    double price = 11;
    int64 pow_nonce = 12;
    string market = 14;
    string side = 15;
    OrderType orderType = 16;
    int64 createdAt = 17;
    int64 updatedAt = 18;
}

// level 1 status
enum OrderLevel1Status {
    ORDER_STATUS_LEVEL1_UNKNOWN = 0;
    ORDER_STATUS_NEW = 1;
    ORDER_STATUS_FULL = 2;
    ORDER_STATUS_SOFT_CANCELLED = 3;
    ORDER_STATUS_HARD_CANCELLED = 4;
    ORDER_STATUS_EXPIRED = 5;
}

// level 2 status
enum OrderLevel2Status {
    ORDER_STATUS_LEVEL2_UNKNOWN = 0;
    ORDER_STATUS_OPEN = 1;
    ORDER_STATUS_PENDING = 2;
    ORDER_STATUS_PARTIAL = 3;
}

// level 3 status
enum OrderLevel3Status {
    ORDER_STATUS_LEVEL3_UNKNOWN = 0;
    ORDER_STATUS_DEFERRED = 1;
    ORDER_STATUS_TINY = 2;
    ORDER_STATUS_MATCHING = 3;
    ORDER_STATUS_SETTLEING = 4;
    ORDER_STATUS_ACTIVE = 5;
}

message OrderStatus {
    OrderLevel1Status level1_status = 1;
    OrderLevel2Status level2_status = 2;
    OrderLevel3Status level3_status = 3;
}

enum OrderType {
    UNKNOWN = 0;
    MARKET = 1;
    P2P = 2;
}

enum MarketSide {
    BUY = 0;
    SELL = 1;
}

enum SoftCancelType {
    BY_ORDER_HASH = 0;
    BY_OWNER = 1;
    BY_TIME = 2; // like cutoff
    BY_MARKET = 3;
}

message RawOrder {
    string protocol = 1;
    string delegate_address = 2;
    string token_s = 3;
    string token_b = 4;
    string amount_s = 5;
    string amount_b = 6;
    int64 valid_since = 7;
    int64 valid_until = 8;
    string lrc_fee = 9;
    bool buy_no_more_than_amount_b = 10;
    int32 margin_split_percentage = 11;
    string owner = 12;
    string wallet_address = 13;
    string auth_addr = 14;
    string auth_private_key = 15;
    int32 v = 16;
    string r = 17;
    string s = 18;
    string hash = 19;
}

message SoftCancelSign {
    int64 timestamp = 1;
    int32 v = 2;
    string r = 3;
    string s = 4;
    string owner = 5;
}

message NotifyRollbackOrders {
    repeated OrderChangeLog change_logs = 1;
}

message OrderChangeLog {
    int64 id = 1;
    int64 preChangeId = 2;
    string order_hash = 3;
    string dealtAmountS = 4;
    string dealtAmountB = 5;
    string splitAmountS = 6;
    string splitAmountB = 7;
    string cancelledAmountS = 8;
    string cancelledAmountB = 9;
    string status = 10;
    int64 updatedBlock = 11;
    int64 createdAt = 12;
    int64 updatedAt = 13;
}

enum OrderSaveResult {
    SUBMIT_SUCC = 0;
    SUBMIT_FAILED = 1;
}
