syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.loopring.lightcone.proto";
package org.loopring.lightcone.proto;

message BytesArray {
    repeated bytes bytesList = 1;
}

message UintArray {
    repeated uint32 uintList = 1;
}

///////////////////////////////////////////////////////
//
// abi functions
//
///////////////////////////////////////////////////////
// IRingSubmitter
message SubmitRingsFunction {
    string data = 1;
}

// IRingCanceller
message CancelOrdersFunction {
    string order_hashs = 1;
}

message CancelAllOrdersForTradingPairFunction {
    string token1 = 1;
    string token2 = 2;
    string cutoff = 3;
}

message CancelAllOrdersFunction {
    string cutoff = 1;
}

message CancelAllOrdersForTradingPairOfOwnerFunction {
    string owner = 1;
    string token1 = 2;
    string token2 = 3;
    string cutoff = 4;
}

message CancelAllOrdersOfOwnerFunction {
    string owner = 1;
    string cutoff = 2;
}

// weth
message WethDepositFunction {
    bytes value = 1;
}

message WethWithdrawalFunction {
    bytes value = 1;
}

// erc20
message ApproveFunction {
    bytes spender = 1;
    bytes value = 2;
}

message TransferFunction {
    bytes receiver = 1;
    bytes value = 2;
}

message TransferFromFunction {
    bytes from = 1;
    bytes to = 2;
    bytes value = 3;
}

///////////////////////////////////////////////////////
//
// abi events
//
///////////////////////////////////////////////////////

// IRingSubmitter
message Fill {
    string order_hash = 1;
    string owner = 2;
    string token_s = 3;
    string amount_s = 4;
    string split = 5;
    string fee_amount = 6;
}

message RingMinedEvent {
    int32 ring_index = 1;
    string ring_hash = 2; // indexed
    string fee_receipt = 3; // indexed
    repeated Fill fills = 4;
}

message InvalidRingEvent {
    string ring_hash = 1;
}

// IRingCanceller
message OrdersCancelledEvent {
    string broker = 1; // indexed
    repeated string order_hashs = 2;
}

message AllOrdersCancelledForTradingPairEvent {
    string broker = 1; // indexed
    string token1 = 2;
    string token2 = 3;
    string cutoff = 4;
}

message AllOrdersCancelledEvent {
    string broker = 1; // indexed
    string cutoff = 2;
}

message OrdersCancelledByBrokerEvent {
    string broker = 1; // indexed
    string owner = 2; // indexed
    repeated string order_hashs = 3;
}

message AllOrdersCancelledForTradingPairByBrokerEvent {
    string broker = 1; // indexed
    string owner = 2; // indexed
    string token1 = 3;
    string token2 = 4;
    string cutoff = 5;
}

message AllOrdersCancelledByBroker {
    string broker = 1; // indexed
    string owner = 2; // indexed
    string cutoff = 3;
}

// weth
message WethDepositEvent {
    bytes dstAddress = 1;
    bytes value = 2;
}

message WethWithdrawalEvent {
    bytes srcAddress = 1;
    bytes value = 2;
}

// erc20
message TransferEvent {
	bytes from = 1;
	bytes to = 2;
	bytes value = 3;
}

message ApprovalEvent {
    bytes owner = 1;
    bytes spender = 2;
    bytes value = 3;
}
