/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.loopring.lightcone.lib.solidity

import org.loopring.lightcone.lib.abi.LoopringAbi
import org.loopring.lightcone.proto.block_chain_event.{ RingMined, SubmitRing, TxHeader }
import org.loopring.lightcone.proto.eth_jsonrpc.Log
import org.scalatest.FlatSpec

class RingSpec extends FlatSpec {

  info("execute cmd [sbt lib/'testOnly *RingSpec'] to test single spec of submitRing")

  val abi = new LoopringAbi("abi/loopring.json")

  "submitRingFunction" should "convert to two orders" in {
    val method = abi.findFunctionByName("submitRing")
    val txhash = "0x4cee545b2c91dda26aab4f595040a0f6db85edb0d88f688334c340754db76fb4"
    val originInput = "0xe78aadb20000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000004a0000000000000000000000000000000000000000000000000000000000000054000000000000000000000000000000000000000000000000000000000000005e00000000000000000000000005552dcfba48c94544beaaf26470df9898e050ac200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c3f2cfa6ac8c941fbc5c99119ef5125402853cbb000000000000000000000000ef68e7c694f40c8202821edf525de3782458639f00000000000000000000000056447c02767ba621f103c0f3dbf564dbcacf284b000000000000000000000000da12e58bad7327caffb453de4519052b1065e342000000000000000000000000d1cbb547b88f019a41e2efeb60c07fb79e79acfa000000000000000000000000beb6fdf4ef6ceb975157be43cbe0047b248a892200000000000000000000000056447c02767ba621f103c0f3dbf564dbcacf284b00000000000000000000000006b6f1af4481e6b4fd440ddc2fc2878dc0bd2f0000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000004a3338d90d3beb00000000000000000000000000000000000000000000000001fc3842bd1f071c00000000000000000000000000000000000000000000000000000000000005b91316a000000000000000000000000000000000000000000000000000000005bb8be6a0000000000000000000000000000000000000000000000025fd8dbf00a1c00000000000000000000000000000000000000000000000004a3338d90d3beb000000000000000000000000000000000000000000000000000212d34c57c2b100000000000000000000000000000000000000000000000000004d8021297c2b40000000000000000000000000000000000000000000000000000000000005b98bec2000000000000000000000000000000000000000000000000000000005b9a10420000000000000000000000000000000000000000000000000c7d713b49da00000000000000000000000000000000000000000000000000212d34c57c2bc000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000001b00000000000000000000000000000000000000000000000000000000000000049431ba56ad73d8f4e41d0c3c8238a888bae7f508cbba3aabee8cb3eaafa16390e537a795c3f11a593fc735b8369c332dc321bb5061ec57466d0b636c73462554e528712af2993ea3d8541f67d4a88d7f448c64aa5e7610c68ae3073629f831a70a3e5af4ab6957e5627f1f2ad3e04ff36ea6af67fdef4a93042a640d6a4b34d9000000000000000000000000000000000000000000000000000000000000000449029e0152d4b5eae6a0979ec079ee5db99ce13b5673cb494789d1fbb3649ad817f00a6c994aec3bb3a71c69eb1cf112c092bb2eeb392588adade7bf0518fb9514d6c387b01ed905ff1adc2d03e4095177c770fabc091ada3aebfd7362ed99835f7fa7482a7c39fb26342b505e3092c26f889d17824714a288c5b22b8fa59f3f"

    abi.decodeInputAndAssemble(originInput, TxHeader()).map(x ⇒ x match {
      case s: SubmitRing ⇒ info(s.getRing.toProtoString)
      case _             ⇒ info("unpack failed")
    })

  }

  "ringminedEvent" should "" in {
    val event = abi.findEventByName("RingMined")
    val txhash = "0x4cee545b2c91dda26aab4f595040a0f6db85edb0d88f688334c340754db76fb4"
    val data = "0x00000000000000000000000000000000000000000000000000000000000010960000000000000000000000005552dcfba48c94544beaaf26470df9898e050ac20000000000000000000000005552dcfba48c94544beaaf26470df9898e050ac20000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000e1dbacf6f900f075309a6cf6c5047eefe07e390b7253b24c0bc0cca341b31a446000000000000000000000000c3f2cfa6ac8c941fbc5c99119ef5125402853cbb000000000000000000000000ef68e7c694f40c8202821edf525de3782458639f000000000000000000000000000000000000000000000004d8021297c2b400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000027ae25757f1000000000000000000000000000000000000000000000000000000000000000000005553dc49215a7360d9d56c18ae9c67e9b5ab9dd3ea1732953558e9684109756e000000000000000000000000d1cbb547b88f019a41e2efeb60c07fb79e79acfa000000000000000000000000beb6fdf4ef6ceb975157be43cbe0047b248a89220000000000000000000000000000000000000000000000212d34c57c2b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffffffffffffffffffffff3828ec4b6260000"
    val topics = Seq(
      "0x4d2a4adf7c5f6cf35d97aecc1919897bf86299dccd9b5e19b2b38ebebf07add0",
      "0x70eaa81b86e8b4c82f9a72f0a0985f09def1035a451afb151ebb297364060c68"
    )
    val log = Log().withData(data).withTopics(topics)

    abi.decodeLogAndAssemble(log, TxHeader()).map(x ⇒ x match {
      case s: RingMined ⇒ s.fills.map(f ⇒ info(f.toProtoString))
      case _            ⇒ info("unpack failed")
    })

  }

}
